name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: push docker image to docker hub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} 

      - name: login to docker hub
        id: docker-hub
        env:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
        run: |
          docker login -u $username -p $password 

      - name: build the docker image
        id: build-docker-image
        working-directory: node-project
        run: |
          ls -la 
          docker build . -f Dockerfile --no-cache -t ${{secrets.DOCKERHUB_USERNAME}}/demo-image-test:latest

      - name: push the docker image
        id: push-docker-image
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/demo-image-test:latest

  terraform-plan-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}         
      
      - name: Create cred.tfvars
        run: |
          echo 'project_id = "genial-diagram-434320-c8"' > Terraform/cred.tfvars
          echo 'region = "us-east1"' >> Terraform/cred.tfvars

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          
      - name: Terraform Init
        run: terraform init
        working-directory: Terraform/
      
      - name: Install OPA
        run: |
          wget https://openpolicyagent.org/downloads/v0.36.0/opa_linux_amd64_static
          chmod +x opa_linux_amd64_static
          sudo mv opa_linux_amd64_static /usr/local/bin/opa
      
      - name: Terraform Plan
        run: |
          terraform plan -var-file=cred.tfvars -out=tfplan
          terraform show -json tfplan > tfplan.json
        working-directory: Terraform/
    
      
      
      - name: Evaluate with OPA
        run: |
          opa eval --data opa/policies/policy.rego --input tfplan.json --format json "data" > result.json
          opa eval --data opa/policies/policy.rego --input tfplan.json --format json "data.terraform.is_port_22_allowed" > test.json
          cat result.json
          cat test.json
      
      
      - name: OPA Policy Result Check
        id: opa_result_parse
        run: |
          # Extract the OPA policy results from the result.json file
          policy_results=$(jq '.result[0].result' result.json)
          
          # Check if the policy results are empty
          if [[ "$policy_results" == "[]" ]]; then
            echo "Terraform plan compliant with OPA policies."
          else
            # Output the policy results if not compliant
            echo "Policy violations found:"
            echo "$policy_results"
            exit 1
          fi
        working-directory: Terraform/  
      
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: Terraform/

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve
      #   working-directory: terraform/
