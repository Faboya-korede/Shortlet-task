name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Image-build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: shortlet-api

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Log in to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      working-directory: node-project
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest

    - name: Verify Docker image
      run: |
        docker run --rm gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest --version

  Policy-checker:
    runs-on: ubuntu-latest
    needs: Image-build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
       
      - name: Setup Conftest
        uses: princespaghetti/setup-conftest@v1    
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}         
      
      - name: Create cred.tfvars
        run: |
          echo 'project_id = "${{ secrets.PROJECT_ID }}"' > cred.tfvars
          echo 'region = "${{ secrets.REGION }}"' >> cred.tfvars
          echo 'cluster_location = "${{ secrets.CLUSTER_LOCATION }}"' >> cred.tfvars
        working-directory: Terraform/  


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          
      - name: Terraform Init
        run: terraform init
        working-directory: Terraform/
      
      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod 755 ./opa
          sudo mv opa /usr/local/bin/
        working-directory: Terraform/ 
      
      - name: Terraform Plan
        run: |
          terraform plan -var-file=cred.tfvars -input=false -out="plan.tfplan"
          terraform show -json plan.tfplan | grep -v "::debug::" | tail -n +2 > plan.json
          pwd
        working-directory: Terraform/
      
      
      - name: Evaluate Rego Policies
        id: evaluate_policies
        run: |
          EXIT_CODE=0
          conftest test plan.json -o table --all-namespaces -p policy/ || EXIT_CODE=$?
          echo "::set-output name=exit_code::$EXIT_CODE"
        working-directory: Terraform/ 
      
      - name: OPA Rules Evaluation Failed
        if: ${{ steps.evaluate_policies.outputs.exit_code != '0' }}
        run: |
          echo "The terraform resources you are deploying on the GCP Account are not complying with the defined standard. Please check the 'Evaluate Rego Policies' step to find the configuration that is not compliant and fix the code."
          exit 1

  Terraform-build:
    runs-on: ubuntu-latest
    needs: Policy-checker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
            credentials_json: ${{ secrets.GCP_SA_KEY }}       

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Create cred.tfvars
        run: |
          echo 'project_id = "${{ secrets.PROJECT_ID }}"' > cred.tfvars
          echo 'region = "${{ secrets.REGION }}"' >> cred.tfvars
          echo 'cluster_location = "${{ secrets.CLUSTER_LOCATION }}"' >> cred.tfvars
        working-directory: Terraform/  

      - name: Terraform Init
        run: terraform init
        working-directory: Terraform/

      - name: Terraform Apply
        run: terraform apply -var-file=cred.tfvars -auto-approve -replace="kubernetes_deployment.shortlet_api"
        working-directory: Terraform/


  Verify-api-accesibiity:
    runs-on: ubuntu-latest
    needs: Terraform-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Delay for 4 minutes
        run: sleep 240  # Sleep for 240 seconds (4 minutes)
    
      - name: Install cURL (if needed)
        run: sudo apt-get install -y curl

      - name: Test API Accessibility
        id: test_api
        run: |
          # Define the API endpoint
          API_URL=${{ secrets.API_URL }}

          # Make a request to the API endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $API_URL)

          # Check if the response is 20O OK
          if [ "$RESPONSE" -eq 200 ]; then
            echo "API is accessible. Received HTTP 200 OK."
          else
            echo "API is not accessible. Received HTTP $RESPONSE."
            exit 1
          fi

      - name: Output API Test Result
        if: failure()
        run: echo "API test failed. Please check the endpoint or the service status."